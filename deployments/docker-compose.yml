version: '3.4'
networks:
  go-kafka:
services:

  # Legacy Database
  legacydb:
    image: mysql:8.0
    container_name: go_kafka_legacydb
    hostname: kafka-legacydb
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: sakila
    volumes:
      - ./../build/legacydb:/docker-entrypoint-initdb.d
    networks:
      - go-kafka

  # Microservice Database
  cataloguedb:
    image: mysql:8.0
    container_name: go_kafka_cataloguedb
    hostname: kafka-cataloguedb
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: catalogue
    volumes:
      - ./../build/cataloguedb:/docker-entrypoint-initdb.d
    networks:
      - go-kafka

  # Kafka
  zookeeper:
    container_name: go_kafka_zookeeper
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - go-kafka

  broker1:
    container_name: go_kafka_broker1
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker1
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - go-kafka

  kafdrop:
    container_name: go_kafka_kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    depends_on:
      - broker1
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka-broker1:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    networks:
      - go-kafka

  schema-registry:
    container_name: go_kafka_schema_registry
    image: confluentinc/cp-schema-registry:5.4.0
    hostname: schema-registry
    depends_on:
      - zookeeper
      - broker1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
    networks:
      - go-kafka

  connect1:
    image: confluentinc/cp-kafka-connect:5.4.0
    container_name: go_kafka_connect1
    hostname: kafka-connect
    depends_on:
      - zookeeper
      - broker1
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_BOOTSTRAP_SERVERS: "kafka-broker1:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect1"
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java'
    networks:
      - go-kafka
    volumes:
      - ./../scripts/createconnectors.sh:/createconnectors.sh
    command:
      - /bin/bash
      - -c
      - |
        # MySQL
        cd /usr/share/java/kafka-connect-jdbc/
        curl https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.20/mysql-connector-java-8.0.20.jar --output mysql-connector-java-8.0.20.jar
        # Now launch Kafka Connect
        sleep infinity &
        /etc/confluent/docker/run
        # & sleep 10 & sh /createconnectors.sh

  # Synchronizer
  cataloguesynchronizer:
    container_name: go_kafka_cataloguesynchronizer
    build:
      context: ./../
      dockerfile: './build/cataloguesynchronizer/Dockerfile'
    restart: always
    depends_on:
      - broker1
      - cataloguedb
    environment:
      DATABASE_DSN: admin:admin@tcp(kafka-cataloguedb:3306)/catalogue
      KAFKA_DSN: kafka-broker1:9092
      KAFKA_TOPIC: p_film
      KAFKA_PARTITION: 0
    networks:
      - go-kafka

  legacydbsynchronizer:
    container_name: go_kafka_legacydbsynchronizer
    build:
      context: ./../
      dockerfile: './build/legacydbsynchronizer/Dockerfile'
    restart: always
    depends_on:
      - broker1
      - legacydb
    environment:
      DATABASE_DSN: admin:admin@tcp(kafka-legacydb:3306)/sakila
      KAFKA_DSN: kafka-broker1:9092
      KAFKA_TOPIC: catalogue
      KAFKA_PARTITION: 0
    networks:
      - go-kafka

  # REST API
  restapi:
    container_name: go_kafka_restapi
    build:
      context: ./../
      dockerfile: './build/restapi/Dockerfile'
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - broker1
      - cataloguedb
    environment:
      DATABASE_DSN: admin:admin@tcp(kafka-cataloguedb:3306)/catalogue
      KAFKA_DSN: kafka-broker1:9092
      KAFKA_TOPIC: catalogue
      KAFKA_PARTITION: 0
      APP_PORT: 8080
    networks:
      - go-kafka
